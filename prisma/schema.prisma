// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            BigInt             @id @default(autoincrement())
  name          String             @unique
  password      String
  email         String             @unique
  googleId      String?
  roles         Role[] // to robi pod spodem ukrytą tabelę z kluczami obcymi (relacja Roles-Users)
  songs         Song[]
  collections   SongsCollection[]
  sharedContent SharedContent[]
}

model Role {
  name        String  @id
  description String?
  user        User[] // to robi pod spodem ukrytą tabelę z kluczami obcymi (relacja Roles-Users)
}

// to jeszcze rozbudować o inne rzeczy
model Song {
  id           BigInt             @id @default(autoincrement())
  title        String
  author       String
  access       AccessType
  addingUser   User              @relation(fields: [addingUserId], references: [id]) // pytanie czy ta relacja mogłaby być opcjonalna
  addingUserId BigInt             @unique // tj. czy piosenka musi/nie musi wiedzieć, jaki user ją dodał
  playlist     SongsCollection[] // to robi pod spodem ukrytą tabelę z kluczami obcymi (relacja Songs-SongsCollections)
}

model SongsCollection {
  id          BigInt      @id @default(autoincrement())
  name        String
  description String?
  songs       Song[] // to robi pod spodem ukrytą tabelę z kluczami obcymi (relacja Songs-SongsCollections)
  type        ContentType
  access      AccessType
  creator     User?      @relation(fields: [creatorId], references: [id])
  creatorId   BigInt?     @unique
}

// tabela przechowująca dane o tym, komu oraz jakie zostały udostępnione treści
model SharedContent {
  recipient   User       @relation(fields: [recipientId], references: [id])
  recipientId BigInt
  contentId   BigInt
  contentType ContentType
  sharedAt    DateTime    @default(now())

  @@id([recipientId, contentId])
}

enum ContentType {
  SONG
  ALBUM
  PLAYLIST
}

enum AccessType {
  PUBLIC
  PRIVATE
  SHARED
}